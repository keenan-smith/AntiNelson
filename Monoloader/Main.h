#pragma once
#ifndef _MONO_FUNCTIONS_
#define _MONO_FUNCTIONS_

#include "kCrypt.h"
#include <fstream>
#include <vector>
#include <wchar.h>
#include <Windows.h>
#include <stdint.h>
#include <stdio.h>
#include <direct.h>

typedef enum {
	MONO_SECURITY_MODE_NONE,
	MONO_SECURITY_MODE_CORE_CLR,
	MONO_SECURITY_MODE_CAS,
	MONO_SECURITY_MODE_SMCS_HACK
} MonoSecurityMode;

typedef void(*mono_security_set_t) (MonoSecurityMode a_security);
typedef PVOID(*mono_domain_get_t) (void);
typedef int(*mono_get_root_domain_t) (void);
typedef int(*mono_assembly_load_from_full_t) (int a_image, int *a_fname, int *a_status, bool a_refonly);
typedef int(*mono_domain_assembly_open_t)(PVOID a_domain, const char* a_file);
typedef int(*mono_assembly_get_image_t) (int a_assembly);
typedef PVOID(*mono_class_from_name_t) (int a_image, const char* a_name_space, const char *a_name);
typedef PVOID(*mono_class_get_method_from_name_t) (PVOID a_klass, const char *a_name, int a_param_count);
typedef int(*mono_runtime_invoke_t) (PVOID a_method, void *a_obj, void **a_params, int **a_exc);
typedef PVOID(*mono_thread_attach_t) (int a_domain);
typedef int(__cdecl* mono_image_open_from_data_full) (int data, unsigned int data_len, int need_copy, int *status, int refonly);
typedef int(__cdecl* mono_assembly_load_from_full) (int image, int *fname, int *status, bool refonly);

mono_security_set_t setMonoSecurity;
mono_domain_get_t getMonoDomain;
mono_get_root_domain_t getRootMonoDomain;
mono_domain_assembly_open_t openAssembly;
mono_assembly_get_image_t getAssemblyImageName;
mono_class_from_name_t getClassFromName;
mono_class_get_method_from_name_t getClassMethodFromName;
mono_runtime_invoke_t invokeRuntime;
mono_thread_attach_t monoAttachToThread;
mono_image_open_from_data_full mono_image_open_from_data_full_;
mono_assembly_load_from_full mono_assembly_load_from_full_;

void __fastcall MonoInit(HMODULE hMono)
{

	setMonoSecurity = (mono_security_set_t)GetProcAddress(hMono, decryptString("0000000010000011000000001000010100000000100001000000000010000101000000000111010100000000100010010000000001111011000000000111100100000000100010110000000010001000000000000111111100000000100010100000000010001111000000000111010100000000100010010000000001111011000000001000101000000000011101010000000010000011000000001000010100000000011110100000000001111011").c_str());
	getMonoDomain = (mono_domain_get_t)GetProcAddress(hMono, decryptString("000000000111110000000000011111100000000001111101000000000111111000000000011011100000000001110011000000000111111000000000011111000000000001110000000000000111100000000000011111010000000001101110000000000111011000000000011101000000000010000011").c_str());
	getRootMonoDomain = (mono_get_root_domain_t)GetProcAddress(hMono, decryptString("00000000100000010000000010000011000000001000001000000000100000110000000001110011000000000111101100000000011110010000000010001000000000000111001100000000100001100000000010000011000000001000001100000000100010000000000001110011000000000111100000000000100000110000000010000001000000000111010100000000011111010000000010000010").c_str());
	openAssembly = (mono_domain_assembly_open_t)GetProcAddress(hMono, decryptString("0000000010000110000000001000100000000000100001110000000010001000000000000111100000000000011111010000000010001000000000001000011000000000011110100000000010000010000000001000011100000000011110000000000001111010000000001000110000000000100011000000000001111110000000001000011000000000011110110000000010000101000000001001001000000000011110000000000010001000000000001000100100000000011111100000000010000111").c_str());
	getAssemblyImageName = (mono_assembly_get_image_t)GetProcAddress(hMono, decryptString("00000000100001000000000010000110000000001000010100000000100001100000000001110110000000000111100000000000100010100000000010001010000000000111110000000000100001000000000001111001000000001000001100000000100100000000000001110110000000000111111000000000011111000000000010001011000000000111011000000000100000000000000010000100000000000111100000000000011111100000000001111100").c_str());
	getClassFromName = (mono_class_from_name_t)GetProcAddress(hMono, decryptString("00000000100000010000000010000011000000001000001000000000100000110000000001110011000000000111011100000000100000000000000001110101000000001000011100000000100001110000000001110011000000000111101000000000100001100000000010000011000000001000000100000000011100110000000010000010000000000111010100000000100000010000000001111001").c_str());
	getClassMethodFromName = (mono_class_get_method_from_name_t)GetProcAddress(hMono, decryptStringc_str());
	invokeRuntime = (mono_runtime_invoke_t)GetProcAddress(hMono, decryptString("0000000010000000000000001000001000000000100000010000000010000010000000000111001000000000100001010000000010001000000000001000000100000000100001110000000001111100000000001000000000000000011110000000000001110010000000000111110000000000100000010000000010001001000000001000001000000000011111100000000001111000").c_str());
	monoAttachToThread = (mono_thread_attach_t)GetProcAddress(hMono, decryptString("000000000111111100000000100000010000000010000000000000001000000100000000011100010000000010000110000000000111101000000000100001000000000001110111000000000111001100000000011101100000000001110001000000000111001100000000100001100000000010000110000000000111001100000000011101010000000001111010").c_str());
	mono_image_open_from_data_full_ = (mono_image_open_from_data_full)GetProcAddress(hMono, decryptString("0000000010000110000000001000100000000000100001110000000010001000000000000111100000000000100000100000000010000110000000000111101000000000100000000000000001111110000000000111100000000000100010000000000010001001000000000111111000000000100001110000000001111000000000000111111100000000100010110000000010001000000000001000011000000000011110000000000001111101000000000111101000000000100011010000000001111010").c_str());
	mono_assembly_load_from_full_ = (mono_assembly_load_from_full)GetProcAddress(hMono, decryptString("0000000010001001000000001000101100000000100010100000000010001011000000000111101100000000011111010000000010001111000000001000111100000000100000010000000010001001000000000111111000000000100010000000000010010101000000000111101100000000100010000000000010001011000000000111110100000000100000000000000001111011000000001000001000000000100011100000000010001011000000001000100100000000011110110000000010000010000000001001000100000000100010000000000010001000").c_str());

}

void __fastcall loadBE()
{

	char tPath[MAX_PATH * 4];
	_getcwd(tPath, sizeof tPath);
	sprintf(tPath, decryptString("0000000001000001000000001000111100000000011110000000000001011110000000000111110100000000100100000000000010010000000000001000100000000000011000010000000010010101000000001000000100000000011110000000000001011110000000000110000100000000010111110000000010001000000000001000010100000000100000010000000010001010000000001001000000000000011110110000000010010100000000000101001000000000010100000000000001001010000000001000000000000000100010000000000010001000").c_str(), tPath);

	printf(decryptString("000000000100111000000000010011010000000001100000000000000110000000000000010110000000000001010001000000000110010100000000010100010000000001000110000000000010110000000000001100010000000001100100").c_str(), LoadLibraryA(tPath));


}

#endif _MONO_FUNCTIONS_